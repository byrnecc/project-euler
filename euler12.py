'''
Project Euler problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

max_divisors = 500 # stop calculating once we have a number with this many divisors
t = 0 # Triangle number to factorize
i = 0 # iterator for the while loop, adds to t to make the next number


def get_factors(n):
	count = 0 # The number of factors for n
	''' Will return out the quantity of factors of a passed integer.'''
	for f in range(1,int((n**0.5)+1)): # iterates up to square root of n. after that only repeating factors.
		if n % f == 0:
			count += 2 # if n / f = x, then n / x = f - two factors
	return(count)


# main loop, iterate through triangle numbers and factorize them
while True:
	i += 1
	t += i
	tfactors = get_factors(t)
	#print('Triangle number:',t,' - Index',i,' - Factors:',tfactors)
	if tfactors >= max_divisors: break # Check that this number has enough divisors to be a solution

print ('\nThe solution is',t,'with',tfactors,'divisors.')
exit(0)

