'''
Project Euler problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

dictfactors = {}  # A dictionary to store our factored numbers for lookup

def get_trinum(n):
	''' Takes single integer as input.
	Will provide the indexed triangle number.
	eg trinum(3) = 6
	Triangle numbers are made by adding all preceding natural numbers in sequence.
	'''
	n = int(n)
	return int((n*(n+1))/2)


def get_factors(n):
	''' Will return out the factors of a passed integer.'''
	ListFactors = [n] # List containing the factors for current value of t. 
	for f in range(1,int(n/2+1)): # we can assume that after t/2 we won't find any more whole number factors
		if n % f == 0:
			if not f in ListFactors:
				ListFactors.append(f)	# Don't add this factor to the list if we already have it
	return(ListFactors)


# main loop, iterate through triangle numbers and factorize them
for i in range(1,20):
	t = get_trinum(i) # our triangle number for this iteration of the loop
	tfactors = get_factors(t)
	print('Triangle number:',t,'Index',i)
	print('Factors:',tfactors)

