'''
Project Euler problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
n = input('Enter index of triangle number:')

def trinum(n):
	''' Takes single integer as input.
	Will provide the indexed triangle number.
	eg trinum(3) = 6
	Triangle numbers are made by adding all preceding natural numbers in sequence.
	'''
	n = int(n)
	return int((n*(n+1))/2)

print(trinum(n))
'''
n = 0	# increase by 1 each loop
t = 0	# triangle numbers. add n each loop
while True:
	n += 1
	t += n
	# We can assume that to have 500 factors it must be at least the 500th triangle number
	if n < 500:
		continue
	# Try to find the first lowest factor.
	ListFactors = [1,t] # List containing the factors for current value of t. Reset for each new value of t
	for f in range(2,int(t/2+1)): # we can assume that after t/2 we won't find any more whole number factors
		if t % f == 0:
			if ListFactors.count(f) == 0:
				ListFactors.append(f)	# Don't add this factor to the list if we already have it

	# Now check that our total number of factors is over 500
	#print('triangle number:',t)
	#print('Factors:',len(ListFactors))
	if len(ListFactors) >= 50:
		break
ListFactors.sort()	
print('The lowest triangle number with other 500 factors is:',t)
print('Factors are:',ListFactors)
'''		
